var urltests = []URLTest{
	// %20 outside query
	{"http://www.google.com/a%20b?q=c+d",TestURL.init(scheme:   "http",Host:     "www.google.com",Path:     "/a b",RawQuery: "q=c+d",},""},
	// path without leading /, so no parsing
	{"http:www.google.com/?q=go+language",TestURL.init(scheme:   "http",Opaque:   "www.google.com/",RawQuery: "q=go+language",},"http:www.google.com/?q=go+language"},
	// path without leading /, so no parsing
	{"http:%2f%2fwww.google.com/?q=go+language",TestURL.init(scheme:   "http",Opaque:   "%2f%2fwww.google.com/",RawQuery: "q=go+language",},"http:%2f%2fwww.google.com/?q=go+language"},
	// non-authority with path
	{"mailto:/webmaster@golang.org",TestURL.init(scheme: "mailto",Path:   "/webmaster@golang.org",},"mailto:///webmaster@golang.org", // unfortunate compromise
	},
	// non-authority
	{"mailto:webmaster@golang.org",TestURL.init(scheme: "mailto",Opaque: "webmaster@golang.org",},""},
	// unescaped :// in query should not create a scheme
	{"/foo?query=http://bad",TestURL.init(Path:     "/foo",RawQuery: "query=http://bad",},""},
	// leading // without scheme should create an authority
	{"//foo",TestURL.init(Host: "foo",},""},
	// leading // without scheme, with userinfo, path, and query
	{"//user@foo/path?a=b",TestURL.init(User:     User("user"),Host:     "foo",Path:     "/path",RawQuery: "a=b",},""},
	// Three leading slashes isn't an authority, but doesn't return an error.
	// (We can't return an error, as this code is also used via
	// ServeHTTP -> ReadRequest -> Parse, which is arguably a
	// different URL parsing context, but currently shares the
	// same codepath)
	{"///threeslashes",TestURL.init(Path: "///threeslashes",},""},
	{"http://user:password@google.com",TestURL.init(scheme: "http",User:   UserPassword("user", "password"),Host:   "google.com",},"http://user:password@google.com"},
	// unescaped @ in username should not confuse host
	{"http://j@ne:password@google.com",TestURL.init(scheme: "http",User:   UserPassword("j@ne", "password"),Host:   "google.com",},"http://j%40ne:password@google.com"},
	// unescaped @ in password should not confuse host
	{"http://jane:p@ssword@google.com",TestURL.init(scheme: "http",User:   UserPassword("jane", "p@ssword"),Host:   "google.com",},"http://jane:p%40ssword@google.com"},
	{"http://j@ne:password@google.com/p@th?q=@go",TestURL.init(scheme:   "http",User:     UserPassword("j@ne", "password"),Host:     "google.com",Path:     "/p@th",RawQuery: "q=@go",},"http://j%40ne:password@google.com/p@th?q=@go"},
	{"http://www.google.com/?q=go+language#foo",TestURL.init(scheme:   "http",Host:     "www.google.com",Path:     "/",RawQuery: "q=go+language",Fragment: "foo",},""},
	{"http://www.google.com/?q=go+language#foo%26bar",TestURL.init(scheme:   "http",Host:     "www.google.com",Path:     "/",RawQuery: "q=go+language",Fragment: "foo&bar",},"http://www.google.com/?q=go+language#foo&bar"},
	{"file:///home/adg/rabbits",TestURL.init(scheme: "file",Host:   "",Path:   "/home/adg/rabbits",},"file:///home/adg/rabbits"},
	// "Windows" paths are no exception to the rule.
	// See golang.org/issue/6027, especially comment #9.
	{"file:///C:/FooBar/Baz.txt",TestURL.init(scheme: "file",Host:   "",Path:   "/C:/FooBar/Baz.txt",},"file:///C:/FooBar/Baz.txt"},
	// case-insensitive scheme
	{"MaIlTo:webmaster@golang.org",TestURL.init(scheme: "mailto",Opaque: "webmaster@golang.org",},"mailto:webmaster@golang.org"},
	// Relative path
	{"a/b/c",TestURL.init(Path: "a/b/c",},"a/b/c"},
	// escaped '?' in username and password
	{"http://%3Fam:pa%3Fsword@google.com",TestURL.init(scheme: "http",User:   UserPassword("?am", "pa?sword"),Host:   "google.com",},""},
	// host subcomponent; IPv4 address in RFC 3986
	{"http://192.168.0.1/",TestURL.init(scheme: "http",Host:   "192.168.0.1",Path:   "/",},""},
	// host and port subcomponents; IPv4 address in RFC 3986
	{"http://192.168.0.1:8080/",TestURL.init(scheme: "http",Host:   "192.168.0.1:8080",Path:   "/",},""},
	// host subcomponent; IPv6 address in RFC 3986
	{"http://[fe80::1]/",TestURL.init(scheme: "http",Host:   "[fe80::1]",Path:   "/",},""},
	// host and port subcomponents; IPv6 address in RFC 3986
	{"http://[fe80::1]:8080/",TestURL.init(scheme: "http",Host:   "[fe80::1]:8080",Path:   "/",},""},
	// host subcomponent; IPv6 address with zone identifier in RFC 6874
	{"http://[fe80::1%25en0]/", // alphanum zone identifierTestURL.init(scheme: "http",Host:   "[fe80::1%en0]",Path:   "/",},""},
	// host and port subcomponents; IPv6 address with zone identifier in RFC 6874
	{"http://[fe80::1%25en0]:8080/", // alphanum zone identifierTestURL.init(scheme: "http",Host:   "[fe80::1%en0]:8080",Path:   "/",},""},
	// host subcomponent; IPv6 address with zone identifier in RFC 6874
	{"http://[fe80::1%25%65%6e%301-._~]/", // percent-encoded+unreserved zone identifierTestURL.init(scheme: "http",Host:   "[fe80::1%en01-._~]",Path:   "/",},"http://[fe80::1%25en01-._~]/"},
	// host and port subcomponents; IPv6 address with zone identifier in RFC 6874
	{"http://[fe80::1%25%65%6e%301-._~]:8080/", // percent-encoded+unreserved zone identifierTestURL.init(scheme: "http",Host:   "[fe80::1%en01-._~]:8080",Path:   "/",},"http://[fe80::1%25en01-._~]:8080/"},
	// alternate escapings of path survive round trip
	{"http://rest.rsc.io/foo%2fbar/baz%2Fquux?alt=media",TestURL.init(scheme:   "http",Host:     "rest.rsc.io",Path:     "/foo/bar/baz/quux",RawPath:  "/foo%2fbar/baz%2Fquux",RawQuery: "alt=media",},""},
	// issue 12036
	{"mysql://a,b,c/bar",TestURL.init(scheme: "mysql",Host:   "a,b,c",Path:   "/bar",},""},
	// worst case host, still round trips
	{"scheme://!$&'()*+,;=hello!:port/path",TestURL.init(scheme: "scheme",Host:   "!$&'()*+,;=hello!:port",Path:   "/path",},""},
	// worst case path, still round trips
	{"http://host/!$&'()*+,;=:@[hello]",TestURL.init(scheme:  "http",Host:    "host",Path:    "/!$&'()*+,;=:@[hello]",RawPath: "/!$&'()*+,;=:@[hello]",},""},
	// golang.org/issue/5684
	{"http://example.com/oid/[order_id]",TestURL.init(scheme:  "http",Host:    "example.com",Path:    "/oid/[order_id]",RawPath: "/oid/[order_id]",},""},
	// golang.org/issue/12200 (colon with empty port)
	{"http://192.168.0.2:8080/foo",TestURL.init(scheme: "http",Host:   "192.168.0.2:8080",Path:   "/foo",},""},
	{"http://192.168.0.2:/foo",TestURL.init(scheme: "http",Host:   "192.168.0.2:",Path:   "/foo",},""},
	{// Malformed IPv6 but still accepted."http://2b01:e34:ef40:7730:8e70:5aff:fefe:edac:8080/foo",TestURL.init(scheme: "http",Host:   "2b01:e34:ef40:7730:8e70:5aff:fefe:edac:8080",Path:   "/foo",},""},
	{// Malformed IPv6 but still accepted."http://2b01:e34:ef40:7730:8e70:5aff:fefe:edac:/foo",TestURL.init(scheme: "http",Host:   "2b01:e34:ef40:7730:8e70:5aff:fefe:edac:",Path:   "/foo",},""},
	{"http://[2b01:e34:ef40:7730:8e70:5aff:fefe:edac]:8080/foo",TestURL.init(scheme: "http",Host:   "[2b01:e34:ef40:7730:8e70:5aff:fefe:edac]:8080",Path:   "/foo",},""},
	{"http://[2b01:e34:ef40:7730:8e70:5aff:fefe:edac]:/foo",TestURL.init(scheme: "http",Host:   "[2b01:e34:ef40:7730:8e70:5aff:fefe:edac]:",Path:   "/foo",},""},
	// golang.org/issue/7991 and golang.org/issue/12719 (non-ascii %-encoded in host)
	{"http://hello.世界.com/foo",TestURL.init(scheme: "http",Host:   "hello.世界.com",Path:   "/foo",},"http://hello.%E4%B8%96%E7%95%8C.com/foo"},
	{"http://hello.%e4%b8%96%e7%95%8c.com/foo",TestURL.init(scheme: "http",Host:   "hello.世界.com",Path:   "/foo",},"http://hello.%E4%B8%96%E7%95%8C.com/foo"},
	{"http://hello.%E4%B8%96%E7%95%8C.com/foo",TestURL.init(scheme: "http",Host:   "hello.世界.com",Path:   "/foo",},""},
	// golang.org/issue/10433 (path beginning with //)
	{"http://example.com//foo",TestURL.init(scheme: "http",Host:   "example.com",Path:   "//foo",},""},
	// test that we can reparse the host names we accept.
	{"myscheme://authority<\"hi\">/foo",TestURL.init(scheme: "myscheme",Host:   "authority<\"hi\">",Path:   "/foo",},""},
	// spaces in hosts are disallowed but escaped spaces in IPv6 scope IDs are grudgingly OK.
	// This happens on Windows.
	// golang.org/issue/14002
	{"tcp://[2020::2020:20:2020:2020%25Windows%20Loves%20Spaces]:2020",TestURL.init(scheme: "tcp",Host:   "[2020::2020:20:2020:2020%Windows Loves Spaces]:2020",},""},
	// test we can roundtrip magnet url
	// fix issue https://golang.org/issue/20054
	{"magnet:?xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a&dn",TestURL.init(scheme:   "magnet",Host:     "",Path:     "",RawQuery: "xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a&dn",},"magnet:?xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a&dn"},
	{"mailto:?subject=hi",TestURL.init(scheme:   "mailto",Host:     "",Path:     "",RawQuery: "subject=hi",},"mailto:?subject=hi"},
}
